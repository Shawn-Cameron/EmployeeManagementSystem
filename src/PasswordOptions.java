
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Shawn Cameron
 */
public class PasswordOptions extends javax.swing.JDialog {

    private static String passFile = ".pass.ser";
    private static String phoneNumberFile = ".phoneNum.ser";
    
    /**
     * Creates new form PasswordOptions
     */
    public PasswordOptions(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        this.getRootPane().setDefaultButton(savePassButton);
        displayPNEntry();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        passwordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        confirmPasswordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        savePassButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        phoneNumberField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Password");

        jLabel2.setText("Confirm Password");

        savePassButton.setText("Save");
        savePassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePassButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Phone Number");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(savePassButton)
                .addGap(132, 132, 132)
                .addComponent(cancelButton)
                .addGap(60, 60, 60))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(phoneNumberField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confirmPasswordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savePassButton)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void savePassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePassButtonActionPerformed
        //checks for restrictions and saves both the password and phone number
        char[] password = passwordField.getPassword();
        char[] confirmPassword = confirmPasswordField.getPassword();
        if (Arrays.equals(password, confirmPassword) && password.length > 5 && phoneNumberField.getText().length() == 10) {
            String thePass = new String(password);
            encryptSavePassword(thePass);
            savePhoneNumber(phoneNumberField.getText());
            this.dispose();
        } else {
            passwordField.setText("");
            confirmPasswordField.setText("");
            if (password.length <= 5) {
                JOptionPane.showMessageDialog(this, "Password must be at least 6 characters");
            }else if(phoneNumberField.getText().length() != 10){
                JOptionPane.showMessageDialog(this, "Invalid Phone Number");
            }else {
                JOptionPane.showMessageDialog(this, "Passwords do not match");
            }
        }
    }//GEN-LAST:event_savePassButtonActionPerformed
    //hashes the password so no one can read from it 
    private static String hashPassword(String pass){
        String generatedPassword = "";
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            byte[] bytes = md.digest(pass.getBytes(StandardCharsets.UTF_8));
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < bytes.length; i++) {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString(); 
        }catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return generatedPassword;
    }
    
    /**
     * displays the phone number when user decides to change their password,
     * in the case that they might want to change their phone number as well
     */
    private void displayPNEntry(){
        File phoneNFile = new File(phoneNumberFile);
        if (phoneNFile.exists()){
            phoneNumberField.setText(getPhoneNumber());
        }
    }
    
    /**
     * Encrypts the Password and saves it to a file
     * @param pass  
     */
    private void encryptSavePassword(String pass) {
        try {
            Path theFilePath = Paths.get(passFile);
            
            File file = new File(passFile);
            if(file.exists()){
               Files.setAttribute(theFilePath, "dos:hidden", false); 
            }
            
            String encryptedPass = hashPassword(pass);
            
            FileOutputStream fileOut = new FileOutputStream(passFile);
            ObjectOutputStream out= new ObjectOutputStream(fileOut);
            out.writeObject(encryptedPass);
            out.close();
            fileOut.close();
            
            Files.setAttribute(theFilePath, "dos:hidden", true);

        } catch(IOException e){
            e.printStackTrace();
        }
    }
    
    /**
     * Gets the hashed password and compares it to the users password entry
     * @param password
     * @return true if the password matches
     * @throws FileNotFoundException when there is no password
     */
    public static boolean collectComparePassword(String password) throws FileNotFoundException {
        try{
            FileInputStream file = new FileInputStream(passFile);
            ObjectInputStream objectsOut = new ObjectInputStream(file);
            String savedPassword = (String) objectsOut.readObject();
            file.close();
            objectsOut.close();
            
            String enteredPass = hashPassword(password);

            if(savedPassword.equals(enteredPass)){
                return true;
            }else{
                return false;
            }
            
        }catch(FileNotFoundException e){
            throw new FileNotFoundException();
        }catch(Exception e){
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * saves the phone number and hides the file
     * @param phoneNum from user entry
     */
    private static void savePhoneNumber(String phoneNum){
        try{
            Path theFilePath = Paths.get(phoneNumberFile);
            
            File file = new File(phoneNumberFile);
            if(file.exists()){
               Files.setAttribute(theFilePath, "dos:hidden", false); 
            }
            
            
            FileOutputStream fileOut = new FileOutputStream(phoneNumberFile);
            ObjectOutputStream out= new ObjectOutputStream(fileOut);
            out.writeObject(phoneNum);
            out.close();
            fileOut.close();
            
            Files.setAttribute(theFilePath, "dos:hidden", true);

            
        }catch(Exception e){
            e.printStackTrace();
        }
    }       
    //retrieves the phone number from the file and returns it 
    public static String getPhoneNumber(){
        try{
            FileInputStream file = new FileInputStream(phoneNumberFile);
            ObjectInputStream objectsOut = new ObjectInputStream(file);
            String savedPhoneNumber = (String) objectsOut.readObject();
            file.close();
            objectsOut.close();
            
            return savedPhoneNumber;
            
        }catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }
    
    public static String getPassFile() {
        return passFile;
    }

    public static String getPNFile(){
        return phoneNumberFile;
    }
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PasswordOptions dialog = new PasswordOptions(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField phoneNumberField;
    private javax.swing.JButton savePassButton;
    // End of variables declaration//GEN-END:variables
}
